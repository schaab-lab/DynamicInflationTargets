Running algorithm:


 -------  GRID ADAPTATION ITERATION 1  ------- 

Stationary Equilibrium: r = 0.0089,  markets(B = -1.82e-11,  S = 2.46e-11,  Y-C = 2.45e-11) 

Evaluating 33 points to refine on ...
Mean level of abs(aH): 1.761. Maximum level of grid: 6. 
Nodes coarsened: 0, children added: 32, parents added: 0, 
Net change: 33 -> 65 = << 32 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 2  ------- 

Stationary Equilibrium: r = 0.0099,  markets(B = -1.43e-09,  S = 2.63e-11,  Y-C = 4.03e-11) 

Evaluating 65 points to refine on ...
Mean level of abs(aH): 0.894022. Maximum level of grid: 7. 
Nodes coarsened: 0, children added: 64, parents added: 0, 
Net change: 65 -> 129 = << 64 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 3  ------- 

Stationary Equilibrium: r = 0.0106,  markets(B = -3.03e-10,  S = 2.80e-11,  Y-C = 3.10e-11) 

Evaluating 129 points to refine on ...
Mean level of abs(aH): 0.450475. Maximum level of grid: 8. 
Nodes coarsened: 0, children added: 128, parents added: 0, 
Net change: 129 -> 257 = << 128 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 4  ------- 

Stationary Equilibrium: r = 0.0111,  markets(B = -2.72e-10,  S = 2.95e-11,  Y-C = 3.23e-11) 

Evaluating 160 points to refine on ...
Mean level of abs(aH): 0.226122. Maximum level of grid: 9. 
Nodes coarsened: 0, children added: 62, parents added: 0, 
Net change: 257 -> 319 = << 62 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 5  ------- 

Stationary Equilibrium: r = 0.0113,  markets(B = 4.95e-11,  S = 3.03e-11,  Y-C = 2.95e-11) 

Evaluating 173 points to refine on ...
Mean level of abs(aH): 0.182164. Maximum level of grid: 10. 
Nodes coarsened: 0, children added: 26, parents added: 0, 
Net change: 319 -> 345 = << 26 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 6  ------- 

Stationary Equilibrium: r = 0.0115,  markets(B = -3.25e-10,  S = 3.16e-11,  Y-C = 3.50e-11) 

Evaluating 178 points to refine on ...
Mean level of abs(aH): 0.168465. Maximum level of grid: 11. 
Nodes coarsened: 0, children added: 10, parents added: 0, 
Net change: 345 -> 355 = << 10 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 7  ------- 

Stationary Equilibrium: r = 0.0116,  markets(B = 1.02e-08,  S = 3.22e-11,  Y-C = -8.66e-11) 

Evaluating 179 points to refine on ...
Mean level of abs(aH): 0.163728. Maximum level of grid: 12. 
Nodes coarsened: 0, children added: 2, parents added: 0, 
Net change: 355 -> 357 = << 2 >>, blacklisted: 0. 


 -------  GRID ADAPTATION ITERATION 8  ------- 

Stationary Equilibrium: r = 0.0116,  markets(B = 6.10e-08,  S = 3.22e-11,  Y-C = -6.76e-10) 

Evaluating 179 points to refine on ...
Mean level of abs(aH): 0.162812. Maximum level of grid: 12. 
Nodes coarsened: 0, children added: 0, parents added: 0, 
Net change: 357 -> 357 = << 0 >>, blacklisted: 0. 


Algorithm converged. Run-time of: 3.41 seconds.

Plotting Figures...
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',53,1)">53  </a>run_time = toc(run_time); fprintf('\n\nAlgorithm converged. Run-time of: %.2f seconds.\n', run_time);
theta = 0 * G.t;
theta(1) = 1.05;

for n = 1:N
    theta(n+1) = 1 - param.rho + param.rho * theta(n);
end
figure; plot(G.t, theta)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.
} 
theta = 0 * G.t;
theta(1) = 1.05;

for n = 1:N-1
    theta(n+1) = 1 - param.rho + param.rho * theta(n);
end
figure; plot(G.t, theta)
if system_dependent('IsDebugMode')==1, dbquit all; end
theta = 0 * G.t;
theta(1) = 1.05;

for n = 1:N-1
    theta(n+1) = 1 - param.rho + param.rho * theta(n);
end

nu = theta / param.kappa;
tau = (1-param.rho) * (1/param.kappa - theta/param.kappa);

pi = 0 * G.t;
for n = N:-1:2
    pi(n) = theta(n)/param.kappa - theta(n-1)/param.kappa;
end
pi(1) = theta(n)/param.kappa - 1/param.kappa;
figure; plot(G.t, pi)
main
Running algorithm:
{Unrecognized field name "T".

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('figure_irf_panel', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m', 53)" style="font-weight:bold">figure_irf_panel</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m',53,0)">line 53</a>)
xlim_max = min(15, param.T);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m', 66)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',66,0)">line 66</a>)
figure_irf_panel(xx, y, 'A', title_string, 0, param);
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m',53,0)
main
Running algorithm:
{Unable to perform assignment because the indices on the left side are not
compatible with the size of the right side.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('figure_irf_panel', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m', 62)" style="font-weight:bold">figure_irf_panel</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m',62,0)">line 62</a>)
    ll(n) = plot(x{n}, y{n}, 'LineWidth', line_width, 'Color', color_palette(n, :));

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m', 81)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',81,0)">line 81</a>)
figure_irf_panel(xx, y, 'D', title_string, 0, param);
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m',62,0)
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m',62,0)
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',81,0)
figure_irf_panel(xx, y, 'D', title_string, 0, param);
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/figure_irf_panel.m',62,1)">62  </a>    ll(n) = plot(x{n}, y{n}, 'LineWidth', line_width, 'Color', color_palette(n, :));
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;
{Unrecognized field name "lambda".
} 
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;
{Unrecognized field name "lambda".
} 
main
Running algorithm:
gamma0

gamma0 =

   2.1158e-05

gamma1

gamma1 =

   -0.3798   -0.3788

gamma2

gamma2 =

    0.0037

gamma1

gamma1 =

   -0.3798   -0.3788

gamma2

gamma2 =

    0.0037

param.beta

ans =

    0.9900

alpha_hat

alpha_hat =

  101.8004

param.kappa

ans =

    0.0858

if system_dependent('IsDebugMode')==1, dbquit; end

theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 0;
end

nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1*theta(1, :) + gamma2 * nu_RSS;
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of columns
in the first matrix matches the number of rows in the second matrix. To operate on
each element of the matrix individually, use TIMES (.*) for elementwise
multiplication.

<a href="matlab:helpview('matlab','error_innerdim')" style="font-weight:bold">Related documentation</a>
} 
gamma1

gamma1 =

   -0.3798   -0.3788


nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1*theta(1, :) + gamma2 * nu_RSS;
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of columns
in the first matrix matches the number of rows in the second matrix. To operate on
each element of the matrix individually, use TIMES (.*) for elementwise
multiplication.

<a href="matlab:helpview('matlab','error_innerdim')" style="font-weight:bold">Related documentation</a>
} 
nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1*theta(1, :) + gamma2 * nu_RSS;
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of columns
in the first matrix matches the number of rows in the second matrix. To operate on
each element of the matrix individually, use TIMES (.*) for elementwise
multiplication.

<a href="matlab:helpview('matlab','error_innerdim')" style="font-weight:bold">Related documentation</a>
} 
nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
for n = 2:N
    nu(n, :) = gamma0 + gamma1.*theta + gamma2*nu(n-1, :);
end
{Unable to perform assignment because the size of the left side is 1-by-2 and the
size of the right side is 50-by-2.
} 
gamma1.*theta(1, :)

ans =

   -0.0190   -0.0189


nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
for n = 2:N
    nu(n, :) = gamma0 + gamma1.*theta(n, :) + gamma2*nu(n-1, :);
end

tau_RSS = 0;
tau = zeros(N, 2);
tau(1, :) = gamma0*gamma2 + (param.rho+gamma2-1)*gamma1.*theta(1, :) ...
            + gamma2*(gamma2-1)*nu_RSS;
for n = 2:N
    tau(n, :) = gamma0*gamma2 + (param.rho+gamma2-1)*gamma1.*theta(n, :) ...
                + gamma2*(gamma2-1)*nu(n-1, :);
end

pi = gamma0 + gamma1.*theta + (gamma2-1)*nu;

xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (NKPC Slope)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_lower_bound.eps', '-depsc', '-opengl', '-r1200');

xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (Lower Bound)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_lower_bound.eps', '-depsc', '-opengl', '-r1200');
lambda0 = 0.05;
lambda1 = 0.5;
rstar = 0.02;
rho_bar = 0.02;
v0 = 1/(2*param.beta) * (lambda0 + lambda1*rho_bar) / (rho_bar + rstar);
v1 = 1/(2*param.beta) * lambda1 / (rho_bar + rstar);

delta1 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) + v1 - ...
         sqrt((1+alpha_hat*(1+param.beta) + v1)^2 - 4*alpha_hat^2*param.beta) );
delta0 = -delta1 * (1+alpha_hat*(1-param.beta)) / (alpha_hat * (1-param.beta*delta1)) * v0;
zeta = alpha_hat * param.beta / ((alpha_hat*param.beta + v1)*(1+alpha_hat) - alpha_hat^2*param.beta);
zeta

zeta =

    0.1344


lambda0 = 0.05;
lambda1 = 0.5;
rstar = 0.02;
rho_bar = 0.02;

v0 = 1/(2*param.beta) * (lambda0 + lambda1*rho_bar) / (rho_bar + rstar);
v1 = 1/(2*param.beta) * lambda1 / (rho_bar + rstar);

delta2(1) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*param.rho))/(alpha_hat*(1-param.beta*delta1)) * v0;
delta2(2) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*0))/(alpha_hat*(1-param.beta*delta1)) * v0;
delta1 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) + v1 - ...
         sqrt((1+alpha_hat*(1+param.beta) + v1)^2 - 4*alpha_hat^2*param.beta) );
delta0 = -delta1 * (1+alpha_hat*(1-param.beta)) / (alpha_hat * (1-param.beta*delta1)) * v0;
zeta = alpha_hat * param.beta / ((alpha_hat*param.beta + v1)*(1+alpha_hat) - alpha_hat^2*param.beta);

theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 1;
end

nu_RSS = delta0 / (1-delta1);
tau_RSS = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+param.alpha)/(param.alpha * param.beta) * ( ...
          delta1 + 1/(zeta*(1+param.alpha)) - (param.alpha*param.beta+v1)/(param.alpha*param.beta) ) * nu_RSS; 

nu = zeros(N, 2);
nu(1, :) = delta0 + delta2.*theta(1, :) + delta1 * nu_RSS;
for n = 2:N
    nu(n, :) = delta0 + delta2.*theta(n, :) + delta1*nu(n-1, :);
end

tau = zeros(N, 2);
tau(1, :) = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+alpha_hat)/(alpha_hat * param.beta) * ( ...
          delta1 + 1/(zeta*(1+alpha_hat)) - (alpha_hat*param.beta+v1)/(alpha_hat*param.beta) ) * nu_RSS; 
for n = 2:N
    tau(n, :) = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+alpha_hat)/(alpha_hat * param.beta) * ( ...
          delta1 + 1/(zeta*(1+alpha_hat)) - (alpha_hat*param.beta+v1)/(alpha_hat*param.beta) ) * nu(n-1, :) ...
          + zeta*(1+alpha_hat)/(alha_hat*param.beta) * (delta2 - v1) .* theta;; 

end
{Unrecognized function or variable 'alha_hat'.
} 

tau = zeros(N, 2);
tau(1, :) = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+alpha_hat)/(alpha_hat * param.beta) * ( ...
          delta1 + 1/(zeta*(1+alpha_hat)) - (alpha_hat*param.beta+v1)/(alpha_hat*param.beta) ) * nu_RSS; 
for n = 2:N
    tau(n, :) = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+alpha_hat)/(alpha_hat * param.beta) * ( ...
          delta1 + 1/(zeta*(1+alpha_hat)) - (alpha_hat*param.beta+v1)/(alpha_hat*param.beta) ) * nu(n-1, :) ...
          + zeta*(1+alpha_hat)/(alpha_hat*param.beta) * (delta2 - v1) .* theta;; 

end
{Unable to perform assignment because the size of the left side is 1-by-2 and the
size of the right side is 50-by-2.
} 
tau = zeros(N, 2);
tau(1, :) = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+alpha_hat)/(alpha_hat * param.beta) * ( ...
          delta1 + 1/(zeta*(1+alpha_hat)) - (alpha_hat*param.beta+v1)/(alpha_hat*param.beta) ) * nu_RSS; 
for n = 2:N
    tau(n, :) = zeta*(1+alpha_hat)/(alpha_hat * param.beta) * (delta0+v0) ...
          + zeta*(1+alpha_hat)/(alpha_hat * param.beta) * ( ...
          delta1 + 1/(zeta*(1+alpha_hat)) - (alpha_hat*param.beta+v1)/(alpha_hat*param.beta) ) * nu(n-1, :) ...
          + zeta*(1+alpha_hat)/(alpha_hat*param.beta) * (delta2 - v1) .* theta(n, :); 

end

pi = zeros(N, 2);

xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (r*)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_rstar.eps', '-depsc', '-opengl', '-r1200');
nu_RSS

nu_RSS =

   -0.2090

nu

nu =

   -0.2086   -0.2075
   -0.2083   -0.1764
   -0.2082   -0.1525
   -0.2083   -0.1341
   -0.2083   -0.1200
   -0.2084   -0.1091
   -0.2085   -0.1008
   -0.2086   -0.0943
   -0.2087   -0.0894
   -0.2087   -0.0856
   -0.2088   -0.0827
   -0.2088   -0.0804
   -0.2089   -0.0787
   -0.2089   -0.0774
   -0.2089   -0.0764
   -0.2090   -0.0756
   -0.2090   -0.0750
   -0.2090   -0.0745
   -0.2090   -0.0742
   -0.2090   -0.0739
   -0.2090   -0.0737
   -0.2090   -0.0735
   -0.2090   -0.0734
   -0.2090   -0.0733
   -0.2090   -0.0732
   -0.2090   -0.0732
   -0.2090   -0.0731
   -0.2090   -0.0731
   -0.2090   -0.0731
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730
   -0.2090   -0.0730


%% 4.3: SLOPE NKPC
theta = zeros(N, 2);
theta(1, :) = 1.05;

for n = 1:N-1
    theta(n+1, 1) = 1 - param.rho + param.rho * theta(n);
    theta(n+1, 2) = 1;
end

nu = theta / param.kappa;
tau = (1-param.rho) * (1/param.kappa - theta/param.kappa);

pi = zeros(N, 2);
for n = N:-1:2
    pi(n, :) = theta(n, :)/param.kappa - theta(n-1, :)/param.kappa;
end
pi(1, :) = theta(1, :)/param.kappa - 1/param.kappa;


xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (NKPC Slope)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_slope.eps', '-depsc', '-opengl', '-r1200');


%% 4.3: SLOPE NKPC
theta = zeros(N, 2);
theta(1, :) = 1.05;

for n = 1:N-1
    theta(n+1, 1) = 1 - param.rho + param.rho * theta(n);
    theta(n+1, 2) = 1;
end

nu = theta / param.kappa;
tau = (1-param.rho) * (1/param.kappa - theta/param.kappa);

pi = zeros(N, 2);
for n = N:-1:2
    pi(n, :) = theta(n, :)/param.kappa - theta(n-1, :)/param.kappa;
end
pi(1, :) = theta(1, :)/param.kappa - 1/param.kappa;


xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (NKPC Slope)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_slope.eps', '-depsc', '-opengl', '-r1200');

Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',113,1)">113 </a>lambda0 = 0.05;
lambda0 = 0.05;
lambda1 = 0.5;
rstar = 0.02;
rho_bar = 0;
if system_dependent('IsDebugMode')==1, dbcont; end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mrdivide')" style="font-weight:bold"> / </a>
Matrix dimensions must agree.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m', 121)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',121,0)">line 121</a>)
delta2(1) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*param.rho))/(1-param.beta*gamma1*param.rho) * gamma1*v1;
} 
(1+alpha_hat*(1-param.beta*param.rho))

ans =

   32.2527

(1-param.beta*gamma1*param.rho) * gamma1*v1
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of columns
in the first matrix matches the number of rows in the second matrix. To operate
on each element of the matrix individually, use TIMES (.*) for elementwise
multiplication.

<a href="matlab:helpview('matlab','error_innerdim')" style="font-weight:bold">Related documentation</a>
} 
(1-param.beta*gamma1*param.rho)

ans =

    1.2632    1.2625

param.rho

ans =

    0.7000

gamma1

gamma1 =

   -0.3798   -0.3788

delta2(1) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*param.rho))/(1-param.beta*gamma1(1)*param.rho) * gamma1*v1;
{Unable to perform assignment because the indices on the left side are not
compatible with the size of the right side.
} 
(1-param.beta*gamma1(1)*param.rho) * gamma1*v1

ans =

   -6.0575   -6.0421

delta2(1) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*param.rho))/(1-param.beta*gamma1(1)*param.rho) * gamma1(1)*v1;
delta2(2) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*0))/(1-param.beta*gamma1(2)*0) * gamma1(2)*v1;
v0 = 1/(2*param.beta) * (lambda0 + lambda1*rho_bar) / (rho_bar + rstar);
v1 = 1/(2*param.beta) * lambda1 / (rho_bar + rstar);

delta2(1) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*param.rho))/(1-param.beta*gamma1(1)*param.rho) * gamma1(1)*v1;
delta2(2) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*0))/(1-param.beta*gamma1(2)*0) * gamma1(2)*v1;
delta1 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) + v1 - ...
         sqrt((1+alpha_hat*(1+param.beta) + v1)^2 - 4*alpha_hat^2*param.beta) );
delta0 = -delta1 * (1+alpha_hat*(1-param.beta)) / (alpha_hat * (1-param.beta*delta1)) * v0;
zeta = alpha_hat * param.beta / ((alpha_hat*param.beta + v1)*(1+alpha_hat) - alpha_hat^2*param.beta);
theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 0;
end
nu_RSS = delta0 / (1-delta1);
tau_RSS = zeta * ( ...
            v0 + delta0 + (delta1 - (alpha_hat*param.beta + v1)/(alpha_hat*param.beta)) * nu_RSS );
nu_RSS

nu_RSS =

   -0.1870

tau_RSS

tau_RSS =

    0.0927

nu = zeros(N, 2);
nu(1, :) = delta0 + delta2.*theta(1, :) + delta1 * nu_RSS;
for n = 2:N
    nu(n, :) = delta0 + delta2.*theta(n, :) + delta1*nu(n-1, :);
end
tau = zeros(N, 2);
tau(:, 1) = zeta * ( ...
                v0 + delta0 ...
                + (delta1 - (alpha_hat*param.beta + v1)/(alpha_hat*param.beta)) * nu ...
                + (delta2 - v1) * param.rho * theta );
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of columns
in the first matrix matches the number of rows in the second matrix. To operate
on each element of the matrix individually, use TIMES (.*) for elementwise
multiplication.

<a href="matlab:helpview('matlab','error_innerdim')" style="font-weight:bold">Related documentation</a>
} 
delta2

delta2 =

   -1.2027   -4.8301

delta1

delta1 =

    0.6978

tau = zeros(N, 2);
tau(:, 1) = zeta * ( ...
                v0 + delta0 ...
                + (delta1 - (alpha_hat*param.beta + v1)/(alpha_hat*param.beta)) * nu(:, 1) ...
                + (delta2(:, 1) - v1) * param.rho * theta(:, 1) );
tau(:, 2) = zeta * ( ...
                v0 + delta0 ...
                + (delta1 - (alpha_hat*param.beta + v1)/(alpha_hat*param.beta)) * nu(:, 2) );
pi = zeros(N, 2);
pi(1, :) = zeta * (nu(1, :) ...
    - (param.alpha*param.beta+v1)/(param.alpha*param.beta) * nu_RSS ...
    + v0 - v1 * theta(1, :) );
for n = 2:N
    pi(n, :) = zeta * (nu(n, :) ...
        - (param.alpha*param.beta+v1)/(param.alpha*param.beta) * nu(n-1, :) ...
        + v0 - v1 * theta(n, :) );
end

xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (r*)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_rstar.eps', '-depsc', '-opengl', '-r1200');
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',113,1)">113 </a>lambda0 = 0.05;
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',137,1)">137 </a>nu_RSS = delta0 / (1-delta1);
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',197,1)">197 </a>theta = zeros(N, 2);
if system_dependent('IsDebugMode')==1, dbcont; end


Algorithm converged. Run-time of: 16.67 seconds.
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',43,1)">43  </a>alpha_hat = param.alpha / (param.kappa^2);
k = 1:50;
kstar = 2:50;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
{Unrecognized field name "gamma".
} 
k = 1:50;
kstar = 2:50;

param.gamma = 1.012;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
delta_tilde = param.alpha * param.beta * param.gamma^(param.epsilon-1);

beta_star = beta_tilde / (beta_tilde + param.beta*param.gamma);
delta_star = delta_tilde / param.beta;
delta_star

delta_star =

    0.8450

beta_star

beta_star =

    0.0180

xx{1} = k;
figure;
y{1} = beta_star * delta_star.^(k-1);
title_string = '';

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');
k

k =

  Columns 1 through 7

     1     2     3     4     5     6     7

  Columns 8 through 14

     8     9    10    11    12    13    14

  Columns 15 through 21

    15    16    17    18    19    20    21

  Columns 22 through 28

    22    23    24    25    26    27    28

  Columns 29 through 35

    29    30    31    32    33    34    35

  Columns 36 through 42

    36    37    38    39    40    41    42

  Columns 43 through 49

    43    44    45    46    47    48    49

  Column 50

    50

figure; plot(k, y{1})
delta_star.^(k-1)

ans =

  Columns 1 through 4

    1.0000    0.8450    0.7141    0.6034

  Columns 5 through 8

    0.5099    0.4309    0.3641    0.3077

  Columns 9 through 12

    0.2600    0.2197    0.1856    0.1569

  Columns 13 through 16

    0.1326    0.1120    0.0947    0.0800

  Columns 17 through 20

    0.0676    0.0571    0.0483    0.0408

  Columns 21 through 24

    0.0345    0.0291    0.0246    0.0208

  Columns 25 through 28

    0.0176    0.0148    0.0125    0.0106

  Columns 29 through 32

    0.0090    0.0076    0.0064    0.0054

  Columns 33 through 36

    0.0046    0.0039    0.0033    0.0028

  Columns 37 through 40

    0.0023    0.0020    0.0017    0.0014

  Columns 41 through 44

    0.0012    0.0010    0.0008    0.0007

  Columns 45 through 48

    0.0006    0.0005    0.0004    0.0004

  Columns 49 through 50

    0.0003    0.0003

y1 = beta_star * delta_star.^(k-1);
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(kstar-2);

figure; plot(k, y1)
figure; plot(kstar, y2)
if system_dependent('IsDebugMode')==1, dbquit all; end
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
{Unrecognized function or variable 'line_width'.
} 

my_blue = [65, 105, 250] ./ 255;
y_ticks = 3;
x_ticks = 6;
tick_font_size = 12;
x_label_font_size = 15;
line_width = 4;
xlim_max = 15;
title_id_size = 17;
title_string_size = 17;

subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlim([0, xlim_max]);
ax = gca; ax.TitleFontWeight = 'normal';
ylim = [ax.YLim(1), ax.YLim(2)];

a = get(gca, 'XTickLabel');
set(gca, 'FontSize', tick_font_size);
a = get(gca, 'YTickLabel');
set(gca, 'FontSize', tick_font_size);

ax.YAxis.Exponent=0;
if max(abs(ylim)) >= 0.1 && max(abs(ylim)) < 1, ytickformat('%.1f'); end
if max(abs(ylim)) >= 0.01 && max(abs(ylim)) < 0.1, ytickformat('%.2f'); end

set(gca, 'Xlim', [0, xlim_max]);
set(gca, 'Ylim', [ylim(1), ylim(2)]);

y_tick_step_size = (ax.YLim(2) - ax.YLim(1)) / (y_ticks-1);
set(gca, 'YTick', [ax.YLim(1) : y_tick_step_size : ax.YLim(2)])

x_tick_step_size = (ax.XLim(2) - ax.XLim(1)) / (x_ticks-1);
set(gca, 'XTick', [ax.XLim(1) : x_tick_step_size : ax.XLim(2)]);

title(['({\bf\fontsize{', num2str(title_id_size), '}', title_id, ...
       '})  {\fontsize{', num2str(title_string_size), '}', title_string, '}'], 'FontSize', 18);
{Unrecognized function or variable 'title_id'.
} 

subplot(1, 2, 1);
title_id = 'Commitment curve';
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlim([0, xlim_max]);
ax = gca; ax.TitleFontWeight = 'normal';
ylim = [ax.YLim(1), ax.YLim(2)];

a = get(gca, 'XTickLabel');
set(gca, 'FontSize', tick_font_size);
a = get(gca, 'YTickLabel');
set(gca, 'FontSize', tick_font_size);

ax.YAxis.Exponent=0;
if max(abs(ylim)) >= 0.1 && max(abs(ylim)) < 1, ytickformat('%.1f'); end
if max(abs(ylim)) >= 0.01 && max(abs(ylim)) < 0.1, ytickformat('%.2f'); end

set(gca, 'Xlim', [0, xlim_max]);
set(gca, 'Ylim', [ylim(1), ylim(2)]);

y_tick_step_size = (ax.YLim(2) - ax.YLim(1)) / (y_ticks-1);
set(gca, 'YTick', [ax.YLim(1) : y_tick_step_size : ax.YLim(2)])

x_tick_step_size = (ax.XLim(2) - ax.XLim(1)) / (x_ticks-1);
set(gca, 'XTick', [ax.XLim(1) : x_tick_step_size : ax.XLim(2)]);

title(['({\bf\fontsize{', num2str(title_id_size), '}', title_id, ...
       '})  {\fontsize{', num2str(title_string_size), '}', title_string, '}'], 'FontSize', 18);
if plot_xlabel, xlabel('Quarters', 'FontSize', x_label_font_size); end
{Unrecognized function or variable 'plot_xlabel'.
} 
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('k');

figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$');

subplot(1, 2, 2);
plot(kstar, y2, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k^*$');

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/commitment_curve.eps', '-depsc', '-opengl', '-r1200');

figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

subplot(1, 2, 2);
plot(kstar, y2, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k^*$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/commitment_curve.eps', '-depsc', '-opengl', '-r1200');



theta = zeros(N, 2);
theta(1, :) = 1.05;

for n = 1:N-1
    theta(n+1, 1) = 1 - param.rho + param.rho * theta(n);
    theta(n+1, 2) = 1;
end

nu = theta / param.kappa;
tau = (1-param.rho) * (1/param.kappa - theta/param.kappa);

pi = zeros(N, 2);
for n = N:-1:2
    pi(n, :) = theta(n, :)/param.kappa - theta(n-1, :)/param.kappa;
end
pi(1, :) = theta(1, :)/param.kappa - 1/param.kappa;


xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = param.kappa / theta(:, 1); y{2} = param.kappa / theta(:, 2);
title_string = 'Shock (NKPC Slope)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_slope.eps', '-depsc', '-opengl', '-r1200');

param.kappa / theta(:, 1)

ans =

  Columns 1 through 8

    0.0817         0         0         0         0         0         0         0

  Columns 9 through 16

         0         0         0         0         0         0         0         0

  Columns 17 through 24

         0         0         0         0         0         0         0         0

  Columns 25 through 32

         0         0         0         0         0         0         0         0

  Columns 33 through 40

         0         0         0         0         0         0         0         0

  Columns 41 through 48

         0         0         0         0         0         0         0         0

  Columns 49 through 50

         0         0


theta = zeros(N, 2);
theta(1, :) = 1.05;

for n = 1:N-1
    theta(n+1, 1) = 1 - param.rho + param.rho * theta(n);
    theta(n+1, 2) = 1;
end

nu = theta / param.kappa;
tau = (1-param.rho) * (1/param.kappa - theta/param.kappa);

pi = zeros(N, 2);
for n = N:-1:2
    pi(n, :) = theta(n, :)/param.kappa - theta(n-1, :)/param.kappa;
end
pi(1, :) = theta(1, :)/param.kappa - 1/param.kappa;


xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = param.kappa ./ theta(:, 1); y{2} = param.kappa ./ theta(:, 2);
title_string = 'Shock (NKPC Slope)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);

legend(ll, {'{\bfPersistent}', '{\bfTransitory}'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14);

set(gcf,'Position',[500,500,1000,350]);
set(gcf,'renderer','Painters');

print('./output/irf_slope.eps', '-depsc', '-opengl', '-r1200');
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',43,1)">43  </a>alpha_hat = param.alpha / (param.kappa^2);

lambda0 = 0.05;
lambda1 = 0.5;
rstar = 0.02;
rho_bar = 0;

v0 = 1/(2*param.beta) * (lambda0 + lambda1*rho_bar) / (rho_bar + rstar);
v1 = 1/(2*param.beta) * lambda1 / (rho_bar + rstar);

delta2(1) = 1/alpha_hat * (1+alpha_hat*(1-param.beta*param.rho))/(1-param.beta*gamma1(1)*param.rho) * gamma1(1)*v1;
{Unrecognized function or variable 'alpha_hat'.
} 
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code/main.m',197,1)">197 </a>theta = zeros(N, 2);
if system_dependent('IsDebugMode')==1, dbcont; end


Algorithm converged. Run-time of: 36.65 seconds.
Running algorithm:
{Unrecognized function or variable 'rho'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', 'C:\Users\cdc63\Desktop\code\main.m', 50)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('C:\Users\cdc63\Desktop\code\main.m',50,0)">line 50</a>)
gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(rho-(1+alpha_hat)/(alpha_hat*beta))
} 
main
Running algorithm:
{Not enough input arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('beta', 'C:\Program Files\MATLAB\R2021b\toolbox\matlab\specfun\beta.m', 19)" style="font-weight:bold">beta</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2021b\toolbox\matlab\specfun\beta.m',19,0)">line 19</a>)
y = exp(betaln(z,w));

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', 'C:\Users\cdc63\Desktop\code\main.m', 50)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('C:\Users\cdc63\Desktop\code\main.m',50,0)">line 50</a>)
gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(param.rho-(1+alpha_hat)/(alpha_hat*beta))
} 
%------------------------------------------------------------------------%
% 
% This code computes the impulse responses to lower bound, r*, and NKPC
% slope shocks under a dynamic inflation target.
% 
% Code written by Christopher Clayton and Andreas Schaab.
% Current version: September 2022. First version: September 2022.
% 
% Please cite our paper:
%   Clayton, C. and A. Schaab. A Theory of Dynamic Inflation Targets.
%   Working Paper.
% Thanks!
% 
%------------------------------------------------------------------------%

clear
close all
clc

diary ./output/output.log
diary on

addpath(genpath('./lib/'))
figure_format;

fprintf('Running algorithm:\n')
Running algorithm:
run_time = tic;


%% PARAMETERS

param = define_parameters();


%% INITIALIZE GRID

% G = setup_grid(param.l, 0, param.min, param.max, 'NamedDims', {1}, 'Names', {'t'});
t = 1:50;
N = numel(t);


%% 4.1: LOWER BOUND
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;

gamma2 = 1/(2*param.alpha*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) - ...
         sqrt((1+alpha_hat*(1+param.beta))^2 - 4*param.alpha^2*param.beta) );

gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(param.rho-(1+alpha_hat)/(alpha_hat*beta))
{Not enough input arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('beta', 'C:\Program Files\MATLAB\R2021b\toolbox\matlab\specfun\beta.m', 19)" style="font-weight:bold">beta</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2021b\toolbox\matlab\specfun\beta.m',19,0)">line 19</a>)
y = exp(betaln(z,w));
} 
main
Running algorithm:

gamma1 =

   -0.0012


gamma1 =

   -0.0012   -0.0038

gamma2

gamma2 =

    0.0037

main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281

main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281

t

t =

  Columns 1 through 16

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16

  Columns 17 through 32

    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32

  Columns 33 through 48

    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48

  Columns 49 through 64

    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64

  Columns 65 through 80

    65    66    67    68    69    70    71    72    73    74    75    76    77    78    79    80

  Columns 81 through 96

    81    82    83    84    85    86    87    88    89    90    91    92    93    94    95    96

  Columns 97 through 112

    97    98    99   100   101   102   103   104   105   106   107   108   109   110   111   112

  Columns 113 through 128

   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128

  Columns 129 through 144

   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144

  Columns 145 through 160

   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160

  Columns 161 through 176

   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176

  Columns 177 through 192

   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192

  Columns 193 through 208

   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208

  Columns 209 through 224

   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224

  Columns 225 through 240

   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240

  Columns 241 through 256

   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256

  Columns 257 through 272

   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272

  Columns 273 through 288

   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288

  Columns 289 through 304

   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304

  Columns 305 through 320

   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320

  Columns 321 through 336

   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336

  Columns 337 through 352

   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352

  Columns 353 through 368

   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368

  Columns 369 through 384

   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384

  Columns 385 through 400

   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400

  Columns 401 through 416

   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416

  Columns 417 through 432

   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432

  Columns 433 through 448

   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448

  Columns 449 through 464

   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464

  Columns 465 through 480

   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480

  Columns 481 through 496

   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496

  Columns 497 through 500

   497   498   499   500

B
{Unrecognized function or variable 'B'.
} 
N

N =

   500

pi

pi =

   -0.0359   -0.0422
   -0.0219    0.0038
   -0.0124    0.0035
   -0.0060    0.0031
   -0.0018    0.0029
    0.0010    0.0026
    0.0027    0.0024
    0.0037    0.0022
    0.0043    0.0020
    0.0045    0.0018
    0.0045    0.0016
    0.0044    0.0015
    0.0042    0.0013
    0.0040    0.0012
    0.0038    0.0011
    0.0035    0.0010
    0.0032    0.0009
    0.0030    0.0008
    0.0027    0.0008
    0.0025    0.0007
    0.0023    0.0006
    0.0021    0.0006
    0.0019    0.0005
    0.0017    0.0005
    0.0016    0.0004
    0.0014    0.0004
    0.0013    0.0004
    0.0012    0.0003
    0.0011    0.0003
    0.0010    0.0003
    0.0009    0.0002
    0.0008    0.0002
    0.0007    0.0002
    0.0007    0.0002
    0.0006    0.0002
    0.0006    0.0002
    0.0005    0.0001
    0.0005    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0000
    0.0002    0.0000
    0.0002    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000

nu

nu =

    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820
    0.5809    0.5821
    0.5810    0.5821
    0.5811    0.5821
    0.5813    0.5822
    0.5814    0.5822
    0.5815    0.5822
    0.5816    0.5823
    0.5817    0.5823
    0.5817    0.5823
    0.5818    0.5823
    0.5819    0.5823
    0.5819    0.5824
    0.5820    0.5824
    0.5820    0.5824
    0.5821    0.5824
    0.5821    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5823    0.5825
    0.5823    0.5825
    0.5823    0.5825
    0.5823    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825

xx

xx =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}

y

y =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {500×1 double}    {500×1 double}

string

ans = 

    ""

title_string

title_string =

    'Shock (Lower Bound)'

xx

xx =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}

main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281

gamma1

gamma1 =

   -0.7882   -0.9281

% slope shocks under a dynamic inflation target.
% 
% Code written by Christopher Clayton and Andreas Schaab.
% Current version: September 2022. First version: September 2022.
% 
% Please cite our paper:
%   Clayton, C. and A. Schaab. A Theory of Dynamic Inflation Targets.
%   Working Paper.
% Thanks!
% 
%------------------------------------------------------------------------%

clear
close all
clc

diary ./output/output.log
diary on

addpath(genpath('./lib/'))
figure_format;

fprintf('Running algorithm:\n')
Running algorithm:
run_time = tic;


%% PARAMETERS

param = define_parameters();


%% INITIALIZE GRID

% G = setup_grid(param.l, 0, param.min, param.max, 'NamedDims', {1}, 'Names', {'t'});
t = 1:500;
N = numel(t);


%% 4.1: LOWER BOUND
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;

gamma2 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) - ...
         sqrt((1+alpha_hat*(1+param.beta))^2 - 4*alpha_hat^2*param.beta) );

gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(param.rho-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882

gamma1(2) = gamma2 / (1-gamma2*param.beta*0)*(0-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882   -0.9281


%gamma1(1) = - alpha_hat/param.beta * gamma2 / (1-param.beta*param.rho*gamma2);
%gamma1(2) = - alpha_hat/param.beta * gamma2 / (1-param.beta*0*gamma2);
gamma0 = lambda_hat/alpha_hat * gamma2 / (1-param.beta*gamma2);

theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 0;
end

nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
for n = 2:N
    nu(n, :) = gamma0 + gamma1.*theta(n, :) + gamma2*nu(n-1, :);
end

tau_RSS = 0;
tau = zeros(N, 2);
%------------------------------------------------------------------------%
% 
% This code computes the impulse responses to lower bound, r*, and NKPC
% slope shocks under a dynamic inflation target.
% 
% Code written by Christopher Clayton and Andreas Schaab.
% Current version: September 2022. First version: September 2022.
% 
% Please cite our paper:
%   Clayton, C. and A. Schaab. A Theory of Dynamic Inflation Targets.
%   Working Paper.
% Thanks!
% 
%------------------------------------------------------------------------%

clear
close all
clc

diary ./output/output.log
diary on

addpath(genpath('./lib/'))
figure_format;

fprintf('Running algorithm:\n')
Running algorithm:
run_time = tic;


%% PARAMETERS

param = define_parameters();


%% INITIALIZE GRID

% G = setup_grid(param.l, 0, param.min, param.max, 'NamedDims', {1}, 'Names', {'t'});
t = 1:500;
N = numel(t);


%% 4.1: LOWER BOUND
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;

gamma2 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) - ...
         sqrt((1+alpha_hat*(1+param.beta))^2 - 4*alpha_hat^2*param.beta) );

gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(param.rho-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882

gamma1(2) = gamma2 / (1-gamma2*param.beta*0)*(0-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882   -0.9281


%gamma1(1) = - alpha_hat/param.beta * gamma2 / (1-param.beta*param.rho*gamma2);
%gamma1(2) = - alpha_hat/param.beta * gamma2 / (1-param.beta*0*gamma2);
gamma0 = lambda_hat/alpha_hat * gamma2 / (1-param.beta*gamma2);

theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 0;
end

nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
for n = 2:N
    nu(n, :) = gamma0 + gamma1.*theta(n, :) + gamma2*nu(n-1, :);
end

tau_RSS = 0;
tau = zeros(N, 2);

for n = 1:N
    tau(n, :) = gamma0 + (gamma2-1)*nu(n,:) + (gamma1 + 1/param.beta).*[param.rho 0].*theta(n,:);
end
tau

tau =

    0.0113    0.0042
    0.0112    0.0038
    0.0107    0.0035
    0.0102    0.0031
    0.0096    0.0029
    0.0089    0.0026
    0.0083    0.0024
    0.0076    0.0022
    0.0070    0.0020
    0.0064    0.0018
    0.0059    0.0016
    0.0054    0.0015
    0.0049    0.0013
    0.0045    0.0012
    0.0041    0.0011
    0.0037    0.0010
    0.0034    0.0009
    0.0031    0.0008
    0.0028    0.0008
    0.0026    0.0007
    0.0023    0.0006
    0.0021    0.0006
    0.0019    0.0005
    0.0018    0.0005
    0.0016    0.0004
    0.0015    0.0004
    0.0013    0.0004
    0.0012    0.0003
    0.0011    0.0003
    0.0010    0.0003
    0.0009    0.0002
    0.0008    0.0002
    0.0008    0.0002
    0.0007    0.0002
    0.0006    0.0002
    0.0006    0.0002
    0.0005    0.0001
    0.0005    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0000
    0.0002    0.0000
    0.0002    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000

nu_RSS

nu_RSS =

    0.5825

nulag = [nu_RSS nu_RSS];
nulag = [nulag;nu(1:end-1,:)]

nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820
    0.5809    0.5821
    0.5810    0.5821
    0.5811    0.5821
    0.5813    0.5822
    0.5814    0.5822
    0.5815    0.5822
    0.5816    0.5823
    0.5817    0.5823
    0.5817    0.5823
    0.5818    0.5823
    0.5819    0.5823
    0.5819    0.5824
    0.5820    0.5824
    0.5820    0.5824
    0.5821    0.5824
    0.5821    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5823    0.5825
    0.5823    0.5825
    0.5823    0.5825
    0.5823    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825

nu_RSS

nu_RSS =

    0.5825

main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820
    0.5809    0.5821
    0.5810    0.5821
    0.5811    0.5821
    0.5813    0.5822
    0.5814    0.5822
    0.5815    0.5822
    0.5816    0.5823
    0.5817    0.5823
    0.5817    0.5823
    0.5818    0.5823
    0.5819    0.5823
    0.5819    0.5824
    0.5820    0.5824
    0.5820    0.5824
    0.5821    0.5824
    0.5821    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5822    0.5824
    0.5823    0.5825
    0.5823    0.5825
    0.5823    0.5825
    0.5823    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5824    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825
    0.5825    0.5825

pi

pi =

    0.0111    0.0041
    0.0113    0.0042
    0.0112    0.0038
    0.0107    0.0035
    0.0102    0.0031
    0.0096    0.0029
    0.0089    0.0026
    0.0083    0.0024
    0.0076    0.0022
    0.0070    0.0020
    0.0064    0.0018
    0.0059    0.0016
    0.0054    0.0015
    0.0049    0.0013
    0.0045    0.0012
    0.0041    0.0011
    0.0037    0.0010
    0.0034    0.0009
    0.0031    0.0008
    0.0028    0.0008
    0.0026    0.0007
    0.0023    0.0006
    0.0021    0.0006
    0.0019    0.0005
    0.0018    0.0005
    0.0016    0.0004
    0.0015    0.0004
    0.0013    0.0004
    0.0012    0.0003
    0.0011    0.0003
    0.0010    0.0003
    0.0009    0.0002
    0.0008    0.0002
    0.0008    0.0002
    0.0007    0.0002
    0.0006    0.0002
    0.0006    0.0002
    0.0005    0.0001
    0.0005    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0000
    0.0002    0.0000
    0.0002    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0
    0.0000         0

tau

tau =

    0.0113    0.0042
    0.0112    0.0038
    0.0107    0.0035
    0.0102    0.0031
    0.0096    0.0029
    0.0089    0.0026
    0.0083    0.0024
    0.0076    0.0022
    0.0070    0.0020
    0.0064    0.0018
    0.0059    0.0016
    0.0054    0.0015
    0.0049    0.0013
    0.0045    0.0012
    0.0041    0.0011
    0.0037    0.0010
    0.0034    0.0009
    0.0031    0.0008
    0.0028    0.0008
    0.0026    0.0007
    0.0023    0.0006
    0.0021    0.0006
    0.0019    0.0005
    0.0018    0.0005
    0.0016    0.0004
    0.0015    0.0004
    0.0013    0.0004
    0.0012    0.0003
    0.0011    0.0003
    0.0010    0.0003
    0.0009    0.0002
    0.0008    0.0002
    0.0008    0.0002
    0.0007    0.0002
    0.0006    0.0002
    0.0006    0.0002
    0.0005    0.0001
    0.0005    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0000
    0.0002    0.0000
    0.0002    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000

pi-tau

ans =

   1.0e-03 *

   -0.2222   -0.0821
    0.1644    0.3767
    0.4062    0.3428
    0.5492    0.3119
    0.6255    0.2838
    0.6571    0.2582
    0.6595    0.2350
    0.6432    0.2138
    0.6155    0.1945
    0.5811    0.1770
    0.5436    0.1611
    0.5049    0.1465
    0.4667    0.1333
    0.4297    0.1213
    0.3946    0.1104
    0.3615    0.1004
    0.3307    0.0914
    0.3021    0.0832
    0.2757    0.0757
    0.2515    0.0689
    0.2292    0.0626
    0.2089    0.0570
    0.1903    0.0519
    0.1733    0.0472
    0.1577    0.0429
    0.1436    0.0391
    0.1307    0.0356
    0.1190    0.0323
    0.1083    0.0294
    0.0985    0.0268
    0.0897    0.0244
    0.0816    0.0222
    0.0743    0.0202
    0.0676    0.0184
    0.0615    0.0167
    0.0559    0.0152
    0.0509    0.0138
    0.0463    0.0126
    0.0421    0.0114
    0.0383    0.0104
    0.0349    0.0095
    0.0318    0.0086
    0.0289    0.0078
    0.0263    0.0071
    0.0239    0.0065
    0.0218    0.0059
    0.0198    0.0054
    0.0180    0.0049
    0.0164    0.0045
    0.0149    0.0041
    0.0136    0.0037
    0.0124    0.0034
    0.0112    0.0031
    0.0102    0.0028
    0.0093    0.0025
    0.0085    0.0023
    0.0077    0.0021
    0.0070    0.0019
    0.0064    0.0017
    0.0058    0.0016
    0.0053    0.0014
    0.0048    0.0013
    0.0044    0.0012
    0.0040    0.0011
    0.0036    0.0010
    0.0033    0.0009
    0.0030    0.0008
    0.0027    0.0007
    0.0025    0.0007
    0.0023    0.0006
    0.0021    0.0006
    0.0019    0.0005
    0.0017    0.0005
    0.0015    0.0004
    0.0014    0.0004
    0.0013    0.0003
    0.0012    0.0003
    0.0011    0.0003
    0.0010    0.0003
    0.0009    0.0002
    0.0008    0.0002
    0.0007    0.0002
    0.0007    0.0002
    0.0006    0.0002
    0.0005    0.0001
    0.0005    0.0001
    0.0005    0.0001
    0.0004    0.0001
    0.0004    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0003    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0001
    0.0002    0.0000
    0.0002    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0001    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000   -0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000   -0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000   -0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000    0.0000
    0.0000   -0.0000
    0.0000   -0.0000
         0   -0.0000
    0.0000   -0.0000
    0.0000    0.0000
         0    0.0000
    0.0000    0.0000
    0.0000    0.0000
   -0.0000    0.0000
   -0.0000    0.0000
    0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
    0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000
   -0.0000   -0.0000

pi(1,:)-tau(1,:)

ans =

   1.0e-03 *

   -0.2222   -0.0821

main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

param

param = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

      alpha: 0.7500
       beta: 0.9900
          d: 1
     d_idio: 1
    epsilon: 11
      kappa: 0.0858
          l: 10
     lambda: 0.0500
        max: 50
        min: 0
        rho: 0.7000
      sigma: 2
       tmax: 50
       tmin: 0
          u: @(x)x.^(1-param.sigma)/(1-param.sigma)
         u1: @(x)x.^(-param.sigma)
      u1inv: @(x)x.^(-1/param.sigma)

xx

xx =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}

y

y =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {50×1 double}    {50×1 double}

y

y =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {50×1 double}    {50×1 double}

xx

xx =

  1×2 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}    {[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 … ]}

t

t =

  Columns 1 through 15

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15

  Columns 16 through 30

    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30

  Columns 31 through 45

    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45

  Columns 46 through 50

    46    47    48    49    50

param

param = 

  <a href="matlab:helpPopup struct" style="font-weight:bold">struct</a> with fields:

      alpha: 0.7500
       beta: 0.9900
          d: 1
     d_idio: 1
    epsilon: 11
      kappa: 0.0858
          l: 10
     lambda: 0.0500
        max: 50
        min: 0
        rho: 0.7000
      sigma: 2
       tmax: 50
       tmin: 0
          u: @(x)x.^(1-param.sigma)/(1-param.sigma)
         u1: @(x)x.^(-param.sigma)
      u1inv: @(x)x.^(-1/param.sigma)

plot(1:N,pi)
plot(1:N,pi)
main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 11.52 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 11.10 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 10.98 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 10.85 seconds.
diary on

addpath(genpath('./lib/'))
figure_format;

fprintf('Running algorithm:\n')
Running algorithm:
run_time = tic;


%% PARAMETERS

param = define_parameters();


%% INITIALIZE GRID

% G = setup_grid(param.l, 0, param.min, param.max, 'NamedDims', {1}, 'Names', {'t'});
t = 1:50;
N = numel(t);


%% 4.1: LOWER BOUND
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;

gamma2 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) - ...
         sqrt((1+alpha_hat*(1+param.beta))^2 - 4*alpha_hat^2*param.beta) );

gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(param.rho-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882

gamma1(2) = gamma2 / (1-gamma2*param.beta*0)*(0-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882   -0.9281


%gamma1(1) = - alpha_hat/param.beta * gamma2 / (1-param.beta*param.rho*gamma2);
%gamma1(2) = - alpha_hat/param.beta * gamma2 / (1-param.beta*0*gamma2);
gamma0 = lambda_hat/alpha_hat * gamma2 / (1-param.beta*gamma2);

theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 0;
end

nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
for n = 2:N
    nu(n, :) = gamma0 + gamma1.*theta(n, :) + gamma2*nu(n-1, :);
end

tau_RSS = 0;
tau = zeros(N, 2);

for n = 1:N
    tau(n, :) = gamma0 + (gamma2-1)*nu(n,:) + (gamma1 + 1/param.beta).*[param.rho 0].*theta(n,:);
end

nulag = [nu_RSS nu_RSS];
nulag = [nulag;nu(1:end-1,:)]

nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820


pi = nu - nulag + 1/param.beta*theta;
t

t =

  Columns 1 through 15

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15

  Columns 16 through 30

    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30

  Columns 31 through 45

    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45

  Columns 46 through 50

    46    47    48    49    50

%------------------------------------------------------------------------%
% 
% This code computes the impulse responses to lower bound, r*, and NKPC
% slope shocks under a dynamic inflation target.
% 
% Code written by Christopher Clayton and Andreas Schaab.
% Current version: September 2022. First version: September 2022.
% 
% Please cite our paper:
%   Clayton, C. and A. Schaab. A Theory of Dynamic Inflation Targets.
%   Working Paper.
% Thanks!
% 
%------------------------------------------------------------------------%

clear
close all
clc

diary ./output/output.log
diary on

addpath(genpath('./lib/'))
figure_format;

fprintf('Running algorithm:\n')
Running algorithm:
run_time = tic;


%% PARAMETERS

param = define_parameters();


%% INITIALIZE GRID

% G = setup_grid(param.l, 0, param.min, param.max, 'NamedDims', {1}, 'Names', {'t'});
t = 1:50;
N = numel(t);


%% 4.1: LOWER BOUND
alpha_hat = param.alpha / (param.kappa^2);
lambda_hat = param.lambda / param.kappa;

gamma2 = 1/(2*alpha_hat*param.beta) * ( ...
         1 + alpha_hat*(1+param.beta) - ...
         sqrt((1+alpha_hat*(1+param.beta))^2 - 4*alpha_hat^2*param.beta) );

gamma1(1) = gamma2 / (1-gamma2*param.beta*param.rho)*(param.rho-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882

gamma1(2) = gamma2 / (1-gamma2*param.beta*0)*(0-(1+alpha_hat)/(alpha_hat*param.beta))

gamma1 =

   -0.7882   -0.9281


%gamma1(1) = - alpha_hat/param.beta * gamma2 / (1-param.beta*param.rho*gamma2);
%gamma1(2) = - alpha_hat/param.beta * gamma2 / (1-param.beta*0*gamma2);
gamma0 = lambda_hat/alpha_hat * gamma2 / (1-param.beta*gamma2);

theta = zeros(N, 2);
theta(1, :) = 0.05;

for n = 1:N-1
    theta(n+1, 1) = param.rho * theta(n);
    theta(n+1, 2) = 0;
end

nu_RSS = gamma0 / (1-gamma2);
nu = zeros(N, 2);
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
for n = 2:N
    nu(n, :) = gamma0 + gamma1.*theta(n, :) + gamma2*nu(n-1, :);
end

tau_RSS = 0;
tau = zeros(N, 2);

for n = 1:N
    tau(n, :) = gamma0 + (gamma2-1)*nu(n,:) + (gamma1 + 1/param.beta).*[param.rho 0].*theta(n,:);
end

nulag = [nu_RSS nu_RSS];
nulag = [nulag;nu(1:end-1,:)]

nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820


pi = nu - nulag + 1/param.beta*theta;



xx{1} = t; xx{2} = t;
figure;
subplot(2, 2, 1);
y{1} = nu(:, 1); y{2} = nu(:, 2);
title_string = 'Target Flexibility';
ll = figure_irf_panel(xx, y, 'A', title_string, 0, param);

subplot(2, 2, 2);
y{1} = tau(:, 1); y{2} = tau(:, 2);
title_string = 'Target Level';
figure_irf_panel(xx, y, 'B', title_string, 0, param);

subplot(2, 2, 3);
y{1} = pi(:, 1); y{2} = pi(:, 2);
title_string = 'Inflation';
figure_irf_panel(xx, y, 'C', title_string, 0, param);

subplot(2, 2, 4);
y{1} = theta(:, 1); y{2} = theta(:, 2);
title_string = 'Shock (Lower Bound)';
figure_irf_panel(xx, y, 'D', title_string, 0, param);
main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 11.15 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 11.07 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 11.22 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 14.15 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 11.27 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 15.49 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820



Algorithm converged. Run-time of: 14.47 seconds.
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/main.m',260,1)">260 </a>k = 1:50;
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/main.m',260,1)">260 </a>k = 1:50;
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/main.m',260,1)">260 </a>k = 1:50;
if system_dependent('IsDebugMode')==1, dbquit; end
clear; clc; close all;

x = rand(1,15) + 4;
y = rand(1,15) + 4;

plot(x,y);

break_axis()
main
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/main.m',286,1)">286 </a>figure;
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

break_axis()
if system_dependent('IsDebugMode')==1, dbquit all; end
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

break_axis('position', 0.2)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('annotation')" style="font-weight:bold">annotation</a>
Position values must be between 0 and 1.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('break_axis', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m', 102)" style="font-weight:bold">break_axis</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',102,0)">line 102</a>)
    h1 = annotation(f, 'rectangle', [X1(1), Y(1), diff(X1), diff(Y)]);
} 

figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

break_axis()

figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

break_axis()
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',117,1)">117 </a>end
if system_dependent('IsDebugMode')==1, dbquit; end
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

break_axis('position', [0.5, 0.5])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('annotation')" style="font-weight:bold">annotation</a>
Unknown argument.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('break_axis', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m', 102)" style="font-weight:bold">break_axis</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',102,0)">line 102</a>)
    h1 = annotation(f, 'rectangle', [X1(1), Y(1), diff(X1), diff(Y)]);
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',102,0)
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
xlabel('$k$', 'Interpreter', 'Latex');

break_axis('position', [0.5, 0.5])
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',102,1)">102 </a>    h1 = annotation(f, 'rectangle', [X1(1), Y(1), diff(X1), diff(Y)]);
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
{Unrecognized function or variable 'k'.
} 
if system_dependent('IsDebugMode')==1, dbquit; end
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');

break_axis('position', 0.01)
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',102,1)">102 </a>    h1 = annotation(f, 'rectangle', [X1(1), Y(1), diff(X1), diff(Y)]);
if system_dependent('IsDebugMode')==1, dbcont; end
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/break_axis.m',117,1)">117 </a>end
if system_dependent('IsDebugMode')==1, dbcont; end
close all
figure;
subplot(1, 2, 1);
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');

break_axis('position', 0.01)

figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-');
scatter(1, 1)
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); xlim([1, xlim_max]);
scatter(1, 1); 
help scatter
  <strong>scatter</strong> Scatter plot.
     <strong>scatter</strong>(X,Y) creates a scatter plot with markers at the locations
     specified by X and Y. One scatter object is created when X and Y are
     vectors. Multiple scatter plots are created if X or Y are matrices.
 
     <strong>scatter</strong>(X,Y,SZ) specifies the area of each marker in points squared.
     To plot all markers with the same size, specify SZ as a scalar. To
     plot each marker with a different size, specify SZ as a vector or
     matrix. If SZ is an empty vector, the default size is used.
 
     <strong>scatter</strong>(X,Y,SZ,C) specifies the marker colors. To plot all markers
     with the same color, specify C as a color name or an RGB triplet. To
     specify different colors for each scatter plot, specify C as an 
     m-by-3 matrix of RGB triplets with one color per scatter object. To
     specify different colors for each scatter point when a single scatter
     plot is created, specify C as an m-by-1 vector with one value per
     scatter point or an m-by-3 matrix of RGB triplets with one color per
     scatter point.
 
     <strong>scatter</strong>(...,'filled') fills the markers with color. Some markers, such
     as '+' and '*' do not support filled color.
 
     <strong>scatter</strong>(...,M) specifies the marker type.
 
     <strong>scatter</strong>(TBL,XVAR,YVAR) creates a scatter plot with the variables XVAR
     and YVAR from table TBL. Multiple scatter plots are created if XVAR or
     YVAR reference multiple variables. For example, this command creates
     two scatter plots: 
     scatter(tbl, {'var1', 'var2'}, {'var3', 'var4'})
 
     <strong>scatter</strong>(TBL,XVAR,YVAR,'filled') specifies data in a table and fills in
     the markers.
 
     <strong>scatter</strong>(...,Name, Value) modifies the scatter chart using one or more
     name-value arguments. For example, 'LineWidth',2 sets the marker
     outline width to 2 points.
 
     <strong>scatter</strong>(AX,...) plots into the axes specified by AX instead of the
     current axes.
 
     H = <strong>scatter</strong>(...) returns one or more Scatter objects.
 
     Example
         load seamount
         scatter(x,y,5,z)
 
     See also <a href="matlab:help scatter3 -displayBanner">scatter3</a>, <a href="matlab:help swarmchart -displayBanner">swarmchart</a>, <a href="matlab:help polarscatter -displayBanner">polarscatter</a>, <a href="matlab:help bubblechart -displayBanner">bubblechart</a>.

    <a href="matlab:doc scatter">Documentation for scatter</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('scatter')">Other functions named scatter</a>

doc scatter
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); xlim([1, xlim_max]);
scatter(1, 1, 'LineWidth', 4, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); xlim([1, xlim_max]);
scatter(1, 1, 3, 'LineWidth', 4, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); xlim([1, xlim_max]);
scatter(1, 1, 20, 'LineWidth', 4, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); xlim([1, xlim_max]);
scatter(1, 1, 100, 'LineWidth', 4, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 200, 'LineWidth', 4, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 200, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;

break_axis('position', 0.03)
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;

break_axis('position', 0.1)
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;

break_axis()
x = rand(1,15) + 4;
y = rand(1,15) + 4;

plot(x,y);

break_axis()
figure;
BreakPlot(rand(1,21),[1:10,40:50],10,40,'Line');
figure;
BreakPlot(rand(1,21),[1:10,40:50],10,40,'Line');
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m',76,1)">76  </a>switch break_type
set(gca,'xlim',xlim);
ytick(ytick>y_break_start)=ytick(ytick>y_break_start)+y_break_mid;
for i=1:length(ytick)
   yticklabel{i}=sprintf('%d',ytick(i));
end;
set(gca,'yticklabel',yticklabel);

figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
{Unrecognized function or variable 'k'.
} 
if system_dependent('IsDebugMode')==1, dbquit; end
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;

y_break_start = 0.05;
y_break_end = 0.95;
% make break
xlim=get(gca,'xlim');
ytick=get(gca,'YTick');
[junk,i]=min(ytick<=y_break_start);
y=(ytick(i)-ytick(i-1))./2+ytick(i-1);
dy=(ytick(2)-ytick(1))./10;
xtick=get(gca,'XTick');
x=xtick(1);
dx=(xtick(2)-xtick(1))./2;

set(gca,'xlim',xlim);
% map back
ytick(ytick>y_break_start)=ytick(ytick>y_break_start)+y_break_mid;
{Unrecognized function or variable 'y_break_mid'.
} 

y_break_start = 0.05;
y_break_end = 0.95;
y_break_mid = (y_break_end-y_break_start)./2+y_break_start;
% make break
xlim=get(gca,'xlim');
ytick=get(gca,'YTick');
[junk,i]=min(ytick<=y_break_start);
y=(ytick(i)-ytick(i-1))./2+ytick(i-1);
dy=(ytick(2)-ytick(1))./10;
xtick=get(gca,'XTick');
x=xtick(1);
dx=(xtick(2)-xtick(1))./2;

set(gca,'xlim',xlim);

% map back
ytick(ytick>y_break_start)=ytick(ytick>y_break_start)+y_break_mid;
for i=1:length(ytick)
   yticklabel{i}=sprintf('%d',ytick(i));
end;
set(gca,'yticklabel',yticklabel);
[k, y1]

ans =

  Columns 1 through 14

    1.0000    2.0000    3.0000    4.0000    5.0000    6.0000    7.0000    8.0000    9.0000   10.0000   11.0000   12.0000   13.0000   14.0000

  Columns 15 through 28

   15.0000   16.0000   17.0000   18.0000   19.0000   20.0000   21.0000   22.0000   23.0000   24.0000   25.0000   26.0000   27.0000   28.0000

  Columns 29 through 42

   29.0000   30.0000   31.0000   32.0000   33.0000   34.0000   35.0000   36.0000   37.0000   38.0000   39.0000   40.0000   41.0000   42.0000

  Columns 43 through 56

   43.0000   44.0000   45.0000   46.0000   47.0000   48.0000   49.0000   50.0000    0.0180    0.0152    0.0129    0.0109    0.0092    0.0078

  Columns 57 through 70

    0.0066    0.0056    0.0047    0.0040    0.0033    0.0028    0.0024    0.0020    0.0017    0.0014    0.0012    0.0010    0.0009    0.0007

  Columns 71 through 84

    0.0006    0.0005    0.0004    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001    0.0001    0.0001

  Columns 85 through 98

    0.0001    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 99 through 100

    0.0000    0.0000

k

k =

  Columns 1 through 23

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23

  Columns 24 through 46

    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46

  Columns 47 through 50

    47    48    49    50

[k, y1]

ans =

  Columns 1 through 14

    1.0000    2.0000    3.0000    4.0000    5.0000    6.0000    7.0000    8.0000    9.0000   10.0000   11.0000   12.0000   13.0000   14.0000

  Columns 15 through 28

   15.0000   16.0000   17.0000   18.0000   19.0000   20.0000   21.0000   22.0000   23.0000   24.0000   25.0000   26.0000   27.0000   28.0000

  Columns 29 through 42

   29.0000   30.0000   31.0000   32.0000   33.0000   34.0000   35.0000   36.0000   37.0000   38.0000   39.0000   40.0000   41.0000   42.0000

  Columns 43 through 56

   43.0000   44.0000   45.0000   46.0000   47.0000   48.0000   49.0000   50.0000    0.0180    0.0152    0.0129    0.0109    0.0092    0.0078

  Columns 57 through 70

    0.0066    0.0056    0.0047    0.0040    0.0033    0.0028    0.0024    0.0020    0.0017    0.0014    0.0012    0.0010    0.0009    0.0007

  Columns 71 through 84

    0.0006    0.0005    0.0004    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001    0.0001    0.0001

  Columns 85 through 98

    0.0001    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000    0.0000

  Columns 99 through 100

    0.0000    0.0000

k

k =

  Columns 1 through 23

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23

  Columns 24 through 46

    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46

  Columns 47 through 50

    47    48    49    50

k = (1:50)';
kstar = 2:50;

param.gamma = 1.012;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
delta_tilde = param.alpha * param.beta * param.gamma^(param.epsilon-1);

beta_star = beta_tilde / (beta_tilde + param.beta*param.gamma);
delta_star = delta_tilde / param.beta;

y1 = beta_star * delta_star.^(k-1);
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(kstar-2);
[k, y1]

ans =

    1.0000    0.0180
    2.0000    0.0152
    3.0000    0.0129
    4.0000    0.0109
    5.0000    0.0092
    6.0000    0.0078
    7.0000    0.0066
    8.0000    0.0056
    9.0000    0.0047
   10.0000    0.0040
   11.0000    0.0033
   12.0000    0.0028
   13.0000    0.0024
   14.0000    0.0020
   15.0000    0.0017
   16.0000    0.0014
   17.0000    0.0012
   18.0000    0.0010
   19.0000    0.0009
   20.0000    0.0007
   21.0000    0.0006
   22.0000    0.0005
   23.0000    0.0004
   24.0000    0.0004
   25.0000    0.0003
   26.0000    0.0003
   27.0000    0.0002
   28.0000    0.0002
   29.0000    0.0002
   30.0000    0.0001
   31.0000    0.0001
   32.0000    0.0001
   33.0000    0.0001
   34.0000    0.0001
   35.0000    0.0001
   36.0000    0.0000
   37.0000    0.0000
   38.0000    0.0000
   39.0000    0.0000
   40.0000    0.0000
   41.0000    0.0000
   42.0000    0.0000
   43.0000    0.0000
   44.0000    0.0000
   45.0000    0.0000
   46.0000    0.0000
   47.0000    0.0000
   48.0000    0.0000
   49.0000    0.0000
   50.0000    0.0000

y2

y2 =

  Columns 1 through 14

    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141    0.0119    0.0100

  Columns 15 through 28

    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013    0.0011    0.0009

  Columns 29 through 42

    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001    0.0001

  Columns 43 through 49

    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000

y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(k-2);
y2

y2 =

    0.1060
    0.0896
    0.0757
    0.0640
    0.0541
    0.0457
    0.0386
    0.0326
    0.0276
    0.0233
    0.0197
    0.0166
    0.0141
    0.0119
    0.0100
    0.0085
    0.0072
    0.0061
    0.0051
    0.0043
    0.0037
    0.0031
    0.0026
    0.0022
    0.0019
    0.0016
    0.0013
    0.0011
    0.0009
    0.0008
    0.0007
    0.0006
    0.0005
    0.0004
    0.0003
    0.0003
    0.0002
    0.0002
    0.0002
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0000
    0.0000
    0.0000
    0.0000

kstar = (2:50)';
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(kstar-2);
y2 = [1; y2];
y2

y2 =

    1.0000
    0.0896
    0.0757
    0.0640
    0.0541
    0.0457
    0.0386
    0.0326
    0.0276
    0.0233
    0.0197
    0.0166
    0.0141
    0.0119
    0.0100
    0.0085
    0.0072
    0.0061
    0.0051
    0.0043
    0.0037
    0.0031
    0.0026
    0.0022
    0.0019
    0.0016
    0.0013
    0.0011
    0.0009
    0.0008
    0.0007
    0.0006
    0.0005
    0.0004
    0.0003
    0.0003
    0.0002
    0.0002
    0.0002
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0000
    0.0000
    0.0000
    0.0000

k = (1:50)';
kstar = (2:50)';

param.gamma = 1.012;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
delta_tilde = param.alpha * param.beta * param.gamma^(param.epsilon-1);

beta_star = beta_tilde / (beta_tilde + param.beta*param.gamma);
delta_star = delta_tilde / param.beta;

y1 = beta_star * delta_star.^(k-1);
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(kstar-2);

y2 = [1; y2];
y2

y2 =

    1.0000
    0.0896
    0.0757
    0.0640
    0.0541
    0.0457
    0.0386
    0.0326
    0.0276
    0.0233
    0.0197
    0.0166
    0.0141
    0.0119
    0.0100
    0.0085
    0.0072
    0.0061
    0.0051
    0.0043
    0.0037
    0.0031
    0.0026
    0.0022
    0.0019
    0.0016
    0.0013
    0.0011
    0.0009
    0.0008
    0.0007
    0.0006
    0.0005
    0.0004
    0.0003
    0.0003
    0.0002
    0.0002
    0.0002
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0001
    0.0000
    0.0000
    0.0000
    0.0000

x = k; y = y2;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
x = k; y = y2;
y_break_mid=(y_break_end-y_break_start)./2+y_break_start;
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.
} 
k = 1:50;

param.gamma = 1.012;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
delta_tilde = param.alpha * param.beta * param.gamma^(param.epsilon-1);

beta_star = beta_tilde / (beta_tilde + param.beta*param.gamma);
delta_star = delta_tilde / param.beta;

y1 = beta_star * delta_star.^(k-1);
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(k-2);
y2(1) = 1; % quasi-hyperbolic jump
x = k; y = y2;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

y

y =

  Columns 1 through 14

    1.0000    0.5000    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141    0.0119    0.0100    0.0085    0.0072

  Columns 15 through 28

    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013    0.0011    0.0009    0.0008    0.0007

  Columns 29 through 42

    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001    0.0001    0.0001    0.0001

  Columns 43 through 47

    0.0001    0.0000    0.0000    0.0000    0.0000

x = k; y = y2;

y_break_start = 0.1;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;
x

x =

  Columns 1 through 23

     1   NaN     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22

  Columns 24 through 46

    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45

  Columns 47 through 51

    46    47    48    49    50

y=[y(1:i-1) y_break_mid y(i:end)]

y =

  Columns 1 through 14

    1.0000    0.5000    0.5000    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166

  Columns 15 through 28

    0.0141    0.0119    0.0100    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016

  Columns 29 through 42

    0.0013    0.0011    0.0009    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001

  Columns 43 through 52

    0.0001    0.0001    0.0001    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000


% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'.');
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.
} 

x = k; y = y2;

y_break_start = 0.1;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'.');
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.
} 
x

x =

  Columns 1 through 23

   NaN     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25

  Columns 24 through 46

    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48

  Columns 47 through 48

    49    50

y2

y2 =

  Columns 1 through 14

    0.5000    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141    0.0119

  Columns 15 through 28

    0.0100    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013    0.0011

  Columns 29 through 42

    0.0009    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001

  Columns 43 through 50

    0.0001    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000

x = k; y = y2;

y_break_start = 0.1;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    % x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'.');
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.
} 
x

x =

  Columns 1 through 23

     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24

  Columns 24 through 46

    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47

  Columns 47 through 49

    48    49    50

x = k; y = y2;

y_break_start = 0.15;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'.');
x = k; y = y2;

y_break_start = 0.15;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'o');
y

y =

  Columns 1 through 14

    0.5250    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141    0.0119

  Columns 15 through 28

    0.0100    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013    0.0011

  Columns 29 through 42

    0.0009    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001

  Columns 43 through 50

    0.0001    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000


% make break
xlim=get(gca,'xlim');
ytick=get(gca,'YTick');
[junk,i]=min(ytick<=y_break_start);
y=(ytick(i)-ytick(i-1))./2+ytick(i-1);
dy=(ytick(2)-ytick(1))./10;
xtick=get(gca,'XTick');
x=xtick(1);
dx=(xtick(2)-xtick(1))./2;

x = k; y = y2;

y_break_start = 0.15;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'o');

% make break
xlim=get(gca,'xlim');
ytick=get(gca,'YTick');
[junk,i]=min(ytick<=y_break_start);
y=(ytick(i)-ytick(i-1))./2+ytick(i-1);
{Array indices must be positive integers or logical values.
} 

x = k; y = y2;

y_break_start = 0.15;
y_break_end   = 0.9;

y_break_mid=(y_break_end-y_break_start)./2+y_break_start;

% erase useless data
x(y>y_break_start & y <y_break_end)=[];
y(y>y_break_start & y <y_break_end)=[];

% leave room for the y_break_end
[junk,i]=min(y>=y_break_end);
if i>y_break_end
    x=[x(1:i-1) NaN x(i:end)];
    y=[y(1:i-1) y_break_mid y(i:end)];
end;

% remap
y2=y;
y2(y2>=y_break_end)=y2(y2>=y_break_end)-y_break_mid;

% plot
h=plot(x,y2,'o');

% make break
xlim=get(gca,'xlim');
ytick=get(gca,'YTick');
[junk,i]=min(ytick<=y_break_start);
y=(ytick(i)-ytick(i-1))./2+ytick(i-1);
{Array indices must be positive integers or logical values.
} 
xlim=get(gca,'xlim');
ytick=get(gca,'YTick');
[junk,i]=min(ytick<=y_break_start);
y=(ytick(i)-ytick(i-1))./2+ytick(i-1);
{Array indices must be positive integers or logical values.
} 
ytick

ytick =

         0    0.0100    0.0200    0.0300    0.0400    0.0500    0.0600    0.0700    0.0800    0.0900

i

i =

     1

ytick

ytick =

         0    0.0100    0.0200    0.0300    0.0400    0.0500    0.0600    0.0700    0.0800    0.0900

y_break_start

y_break_start =

    0.1500

i

i =

     1

Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

{Unrecognized function or variable 'break_type'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/main.m', 325)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/main.m',325,0)">line 325</a>)
switch break_type
} 
x = k; y = y2;
y_break_start = 0.15;
y_break_end   = 0.9;

BreakPlot(x, y, y_break_start, y_break_end, break_type)
{Unrecognized function or variable 'break_type'.
} 
BreakPlot(x, y, y_break_start, y_break_end)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('BreakPlot', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m', 64)" style="font-weight:bold">BreakPlot</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m',64,0)">line 64</a>)
h=plot(x,y2,'.');
} 
y

y =

  Columns 1 through 14

    0.4750    0.5250    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141

  Columns 15 through 28

    0.0119    0.0100    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013

  Columns 29 through 42

    0.0011    0.0009    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001

  Columns 43 through 51

    0.0001    0.0001    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000

x

x =

  Columns 1 through 23

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23

  Columns 24 through 46

    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46

  Columns 47 through 50

    47    48    49    50

y1 = beta_star * delta_star.^(k-1);
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(k-2);
y2(1) = 1; % quasi-hyperbolic jump
y2

y2 =

  Columns 1 through 14

    1.0000    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141    0.0119

  Columns 15 through 28

    0.0100    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013    0.0011

  Columns 29 through 42

    0.0009    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001

  Columns 43 through 50

    0.0001    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000

y_break_start = 0.15;
y_break_end   = 0.9;

BreakPlot(x, y, y_break_start, y_break_end)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Vectors must be the same length.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('BreakPlot', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m', 64)" style="font-weight:bold">BreakPlot</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m',64,0)">line 64</a>)
h=plot(x,y2,'.');
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m',64,0)
y_break_start = 0.15;
y_break_end   = 0.9;

BreakPlot(x, y, y_break_start, y_break_end)
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m',64,1)">64  </a>h=plot(x,y2,'.');
if system_dependent('IsDebugMode')==1, dbquit; end
x

x =

  Columns 1 through 23

     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23

  Columns 24 through 46

    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46

  Columns 47 through 50

    47    48    49    50

y2

y2 =

  Columns 1 through 14

    1.0000    0.0896    0.0757    0.0640    0.0541    0.0457    0.0386    0.0326    0.0276    0.0233    0.0197    0.0166    0.0141    0.0119

  Columns 15 through 28

    0.0100    0.0085    0.0072    0.0061    0.0051    0.0043    0.0037    0.0031    0.0026    0.0022    0.0019    0.0016    0.0013    0.0011

  Columns 29 through 42

    0.0009    0.0008    0.0007    0.0006    0.0005    0.0004    0.0003    0.0003    0.0002    0.0002    0.0002    0.0001    0.0001    0.0001

  Columns 43 through 50

    0.0001    0.0001    0.0001    0.0001    0.0000    0.0000    0.0000    0.0000

x = k; y = y2;

y_break_start = 0.2;
y_break_end   = 0.3;

BreakPlot(x, y, y_break_start, y_break_end)
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code FIXED/BreakPlot.m',64,1)">64  </a>h = plot(x, y2, '.');
h = plot(x, y2, '.');
if system_dependent('IsDebugMode')==1, dbcont; end

ans = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0 0.2980 0.6000]
          LineStyle: 'none'
          LineWidth: 3.5000
             Marker: '.'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: [1 NaN 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 … ]
              YData: [0.7500 0.2500 0.0896 0.0757 0.0640 0.0541 0.0457 0.0386 0.0326 0.0276 0.0233 0.0197 0.0166 0.0141 0.0119 0.0100 … ]

  Show <a href="matlab:if exist('ans', 'var'), matlab.graphics.internal.getForDisplay('ans', ans, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('ans'), end">all properties</a>

x = k; y = y2;

y_break_start = 0.1;
y_break_end   = 0.3;

BreakPlot(x, y, y_break_start, y_break_end)

ans = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0 0.2980 0.6000]
          LineStyle: 'none'
          LineWidth: 3.5000
             Marker: '.'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: [1 NaN 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 … ]
              YData: [0.8000 0.2000 0.0896 0.0757 0.0640 0.0541 0.0457 0.0386 0.0326 0.0276 0.0233 0.0197 0.0166 0.0141 0.0119 0.0100 … ]

  Show <a href="matlab:if exist('ans', 'var'), matlab.graphics.internal.getForDisplay('ans', ans, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('ans'), end">all properties</a>

x = k; y = y2;

y_break_start = 0.1;
y_break_end   = 0.2;

BreakPlot(x, y, y_break_start, y_break_end)

ans = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0 0.2980 0.6000]
          LineStyle: 'none'
          LineWidth: 3.5000
             Marker: '.'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: [1 NaN 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 … ]
              YData: [0.8500 0.1500 0.0896 0.0757 0.0640 0.0541 0.0457 0.0386 0.0326 0.0276 0.0233 0.0197 0.0166 0.0141 0.0119 0.0100 … ]

  Show <a href="matlab:if exist('ans', 'var'), matlab.graphics.internal.getForDisplay('ans', ans, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('ans'), end">all properties</a>

x = k; y = y2;

y_break_start = 0.01;
y_break_end   = 0.2;

BreakPlot(x, y, y_break_start, y_break_end)

ans = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0 0.2980 0.6000]
          LineStyle: 'none'
          LineWidth: 3.5000
             Marker: '.'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: [1 NaN 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50]
              YData: [0.8950 0.1050 0.0085 0.0072 0.0061 0.0051 0.0043 0.0037 0.0031 0.0026 0.0022 0.0019 0.0016 0.0013 0.0011 … ]

  Show <a href="matlab:if exist('ans', 'var'), matlab.graphics.internal.getForDisplay('ans', ans, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('ans'), end">all properties</a>

y_break_start = 0.1;
y_break_end   = 0.11;

BreakPlot(x, y, y_break_start, y_break_end)

ans = 

  <a href="matlab:helpPopup matlab.graphics.chart.primitive.Line" style="font-weight:bold">Line</a> with properties:

              Color: [0 0.2980 0.6000]
          LineStyle: 'none'
          LineWidth: 3.5000
             Marker: '.'
         MarkerSize: 6
    MarkerFaceColor: 'none'
              XData: [1 NaN 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 … ]
              YData: [0.8950 0.1050 0.0896 0.0757 0.0640 0.0541 0.0457 0.0386 0.0326 0.0276 0.0233 0.0197 0.0166 0.0141 0.0119 0.0100 … ]

  Show <a href="matlab:if exist('ans', 'var'), matlab.graphics.internal.getForDisplay('ans', ans, 'matlab.graphics.chart.primitive.Line'), else, matlab.graphics.internal.getForDisplay('ans'), end">all properties</a>

plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;


break_axis('position', 0.1)

plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;


break_axis('position', 0.5)
figure;
subplot(1, 2, 1); hold on;
plot(k, y1, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 1, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;


break_axis('position', 0.5)
figure;
subplot(1, 2, 1); hold on;
plot(k, y2, ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
hold off;


break_axis('position', 0.12)
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;


break_axis('position', 0.12)
figure;
subplot(1, 2, 1); hold on;
% scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
plot(1, 0.15, 'o')
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;


break_axis('position', 0.12)

plot(1, 0.15,'o','MarkerSize',5, 'MarkerFaceColor','y','MarkerEdgeColor','b','LineWidth',2)
figure;
subplot(1, 2, 1); hold on;
% scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
plot(1, 0.15,'o','MarkerSize',5, 'MarkerFaceColor','y','MarkerEdgeColor','b','LineWidth',2)

plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
xticklabels({'0', '0.05', '0.1', '1'})
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 2, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 5, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 10, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 4, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})
figure;
subplot(1, 2, 1); hold on;
scatter(1, 0.15, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})
figure;
hold on;
scatter(1, 0.15, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})
figure;
hold on;
scatter(1, 0.15, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})

xlabel('$k$', 'Interpreter', 'Latex');
figure;
hold on;
scatter(1, 0.15, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', my_blue, ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})

xlabel('$k$', 'Interpreter', 'Latex');
figure;
hold on;
scatter(1, 0.15, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
{Unrecognized function or variable 'color_palette'.
} 
color_palette = [65, 105, 250; ...
                 201, 66, 79; ...
                 039,169,65] ./ 255;
k = 1:50;

% Gamma = 1.01
param.gamma = 1.01;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
delta_tilde = param.alpha * param.beta * param.gamma^(param.epsilon-1);

beta_star = beta_tilde / (beta_tilde + param.beta*param.gamma);
delta_star = delta_tilde / param.beta;

% y1 = beta_star * delta_star.^(k-1);
y1 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(k-2);
y1(1) = 1; % quasi-hyperbolic jump


% Gamma = 1.02
param.gamma = 1.02;

beta_tilde = (param.gamma-1) * param.beta * (1-param.alpha*param.gamma^(param.epsilon-1)) * (param.epsilon-1);
delta_tilde = param.alpha * param.beta * param.gamma^(param.epsilon-1);

beta_star = beta_tilde / (beta_tilde + param.beta*param.gamma);
delta_star = delta_tilde / param.beta;

% y1 = beta_star * delta_star.^(k-1);
y2 = beta_star*delta_star/(1-delta_star) / ...
    (1 + beta_star*delta_star/(1-delta_star)) * delta_star.^(k-2);
y2(1) = 1; % quasi-hyperbolic jump

figure;
hold on;
scatter(1, 0.15, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.12)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})

xlabel('$k$', 'Interpreter', 'Latex');
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.23)
yticks([0 0.05 0.1 0.15])
yticklabels({'0', '0.05', '0.1', '1'})

xlabel('$k$', 'Interpreter', 'Latex');


figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.23)
yticks([0 0.05 0.1 0.15 0.2 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '0.2', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', my_blue);
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,1000,350]);
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,700,400]);
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l1, l2], {'$\bar \pi = 1\%$', '$\bar \pi = 2\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 14, 'Interpreter', 'Latex');

figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 17, 'Interpreter', 'Latex');
figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

print('./output/commitment_curve_discontinuous.eps', '-depsc', '-opengl', '-r1200');
figure;
hold on;
% scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
plot(1, 0.25, 'o', 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

figure;
hold on;
scatter(1, 0.25, 150, 'LineWidth', 4, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 4, 'MarkerEdgeColor', color_palette(2, :));
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

print('./output/commitment_curve_discontinuous.eps', '-depsc', '-opengl', '-r1200');

figure;
hold on;
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

print('./output/commitment_curve_discontinuous.eps', '-depsc', '-opengl', '-r1200');


figure;
hold on;
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
% set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

print('./output/commitment_curve_discontinuous.eps', '-depsc', '-opengl', '-r1200');

figure;
hold on;
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
% set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

print('./output/commitment_curve_discontinuous.eps', '-depsc', '-r1200');

figure;
hold on;
l1 = plot(k(2:end), y1(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
l2 = plot(k(2:end), y2(2:end), ...
    'LineWidth', line_width, 'Color', color_palette(2, :), ...
    'LineStyle', '-'); % xlim([1, xlim_max]);
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(1, :));
scatter(1, 0.25, 150, 'LineWidth', 3, 'MarkerEdgeColor', color_palette(2, :));
hold off;

break_axis('position', 0.18)
yticks([0 0.05 0.1 0.15 0.25])
yticklabels({'0', '0.05', '0.1', '0.15', '1'})

xlabel('$k$', 'Interpreter', 'Latex');

set(gcf,'Position',[500,500,550,300]);
set(gcf,'renderer','Painters');

legend([l2, l1], {'$\bar \pi = 2\%$', '$\bar \pi = 1\%$'}, ...
    'Location', 'NorthEast', 'box', 'off', 'FontSize', 18, 'Interpreter', 'Latex');

print('./output/commitment_curve_discontinuous.eps', '-depsc', '-r1200');
Running algorithm:

gamma1 =

   -0.7882


gamma1 =

   -0.7882   -0.9281


nulag =

    0.5825    0.5825
    0.5431    0.5361
    0.5191    0.5403
    0.5055    0.5441
    0.4989    0.5476
    0.4970    0.5507
    0.4981    0.5536
    0.5010    0.5562
    0.5051    0.5586
    0.5098    0.5607
    0.5148    0.5627
    0.5198    0.5645
    0.5247    0.5661
    0.5293    0.5676
    0.5337    0.5689
    0.5379    0.5702
    0.5417    0.5713
    0.5452    0.5723
    0.5485    0.5732
    0.5515    0.5740
    0.5543    0.5748
    0.5568    0.5755
    0.5591    0.5761
    0.5612    0.5767
    0.5631    0.5772
    0.5648    0.5777
    0.5664    0.5781
    0.5679    0.5785
    0.5692    0.5789
    0.5704    0.5792
    0.5715    0.5795
    0.5725    0.5798
    0.5734    0.5800
    0.5742    0.5803
    0.5750    0.5805
    0.5756    0.5807
    0.5763    0.5808
    0.5768    0.5810
    0.5773    0.5811
    0.5778    0.5812
    0.5782    0.5814
    0.5786    0.5815
    0.5790    0.5816
    0.5793    0.5816
    0.5796    0.5817
    0.5798    0.5818
    0.5801    0.5819
    0.5803    0.5819
    0.5805    0.5820
    0.5807    0.5820

[Warning: Exported image displays axes toolbar. To remove axes toolbar from image, export again.] 


Algorithm converged. Run-time of: 21.67 seconds.
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
{Unrecognized function or variable 'alpha_hat'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m', 48)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',48,0)">line 48</a>)
delta1 = 1/(2*alpha_hat*param.beta) * ( ...
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',48,0)
main
Running algorithm:
v0 = 1/(2*param.beta) * (lambda0 + lambda1*rho_bar) / (rho_bar + rstar);
{Unrecognized function or variable 'lambda0'.
} 
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
{Unrecognized field name "beta".

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m', 40)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',40,0)">line 40</a>)
v0 = 1/(2*p.beta) * (p.lambda0 + p.lambda1*p.rho_bar) ...
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',40,0)
main
Running algorithm:
{Unrecognized function or variable 'alpha_hat'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m', 44)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',44,0)">line 44</a>)
delta1 = 1/(2*alpha_hat*p.beta) * ( ...
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',44,0)
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
{Unrecognized function or variable 'alpha_hat'.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m', 94)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',94,0)">line 94</a>)
        - (alpha_hat*p.beta+v1)/(alpha_hat*p.beta) * nu(n-1, :) ...
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',94,0)
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',130,1)">130 </a>theta = zeros(N, 2);
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',132,1)">132 </a>theta = zeros(N, 2);
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',183,1)">183 </a>k = 1:50;
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('gamma')" style="font-weight:bold">gamma</a>
Not enough input arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m', 185)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',185,0)">line 185</a>)
beta_tilde = (gamma-1) * p.beta * (1-p.alpha*gamma^(p.epsilon-1)) * (p.epsilon-1);
} 
opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',185,0)
main
Running algorithm:


Algorithm converged. Run-time of: 12.99 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.32 seconds.
Running algorithm:


Algorithm converged. Run-time of: 13.24 seconds.
Running algorithm:


Algorithm converged. Run-time of: 14.78 seconds.
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:


Algorithm converged. Run-time of: 13.68 seconds.
Running algorithm:


Algorithm converged. Run-time of: 13.22 seconds.
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Clayton Schaab/CIT/code_final/main.m',257,1)">257 </a>gamma2 = 1/(2*p.alpha_hat*p.beta) * ( ...
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:


Algorithm converged. Run-time of: 12.89 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.47 seconds.
Running algorithm:


Algorithm converged. Run-time of: 13.06 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.97 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.91 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.09 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.83 seconds.
Running algorithm:


Algorithm converged. Run-time of: 12.58 seconds.
{Unrecognized function or variable 'figure_format'.

Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m', 24)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',24,0)">line 24</a>)
figure_format;
^^^^^^^^^^^^^
} 
main
Running algorithm:


Algorithm converged. Run-time of: 15.37 seconds.
Running algorithm:
{Unrecognized function or variable 'delta1'.

Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('define_parameters', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/define_parameters.m', 51)" style="font-weight:bold">define_parameters</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/define_parameters.m',51,0)">line 51</a>)
               / (1-p.beta*delta1*p.rho) * delta1*p.v1;
                           ^^^^^^
Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m', 30)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',30,0)">line 30</a>)
p = define_parameters();
    ^^^^^^^^^^^^^^^^^^^
} 
opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/define_parameters.m',51,0)
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
{Error using inputcheck
'./output/rstar.eps' and 'noui' might be file names. Specify only one file name.

Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('print', '/Applications/MATLAB_R2024b.app/toolbox/matlab/graphics/graphics/printing/print.m', 41)" style="font-weight:bold">print</a> (<a href="matlab: opentoline('/Applications/MATLAB_R2024b.app/toolbox/matlab/graphics/graphics/printing/print.m',41,0)">line 41</a>)
[pj, devices, options ] = inputcheck( pj, inputargs{:} );
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m', 113)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',113,0)">line 113</a>)
print('./output/rstar.eps', '-depsc', '-painters', 'noui', '-r600');
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
} 
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',166,1)">166 </a>print('./output/slope.eps', '-depsc', '-painters', 'noui', '-r600');
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',239,1)">239 </a>print('./output/commitment_curve.eps', '-depsc', 'painters', '-r600');
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
{Reference to a cleared variable color_palette.

Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m', 217)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',217,0)">line 217</a>)
    'LineWidth', line_width, 'Color', color_palette(1, :), ...
                                      ^^^^^^^^^^^^^^^^^^^
} 
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',241,1)">241 </a>print('./output/commitment_curve.eps', '-depsc', 'painters', '-r600');
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',237,1)">237 </a>print('./output/commitment_curve.eps', '-depsc', 'painters', '-r600');
if system_dependent('IsDebugMode')==1, dbquit; end
main
Running algorithm:
{Error using inputcheck
'./output/commitment_curve.eps' and 'painters' might be file names. Specify only one file name.

Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('print', '/Applications/MATLAB_R2024b.app/toolbox/matlab/graphics/graphics/printing/print.m', 41)" style="font-weight:bold">print</a> (<a href="matlab: opentoline('/Applications/MATLAB_R2024b.app/toolbox/matlab/graphics/graphics/printing/print.m',41,0)">line 41</a>)
[pj, devices, options ] = inputcheck( pj, inputargs{:} );
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m', 237)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',237,0)">line 237</a>)
print('./output/commitment_curve.eps', '-depsc', 'painters', '-r600');
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
} 
main
Running algorithm:
<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',243,1)">243 </a>[nu, tau, theta] = deal(zeros(N, 2));
if system_dependent('IsDebugMode')==1, dbquit all; end
main
Running algorithm:
{Unrecognized function or variable 'gamma0'.

Error in <a href="matlab:matlab.lang.internal.introspective.errorDocCallback('main', '/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m', 257)" style="font-weight:bold">main</a> (<a href="matlab: opentoline('/Users/andreasschaab/Dropbox/Schaab-Lab/DynamicInflationTargets/code/main.m',257,0)">line 257</a>)
nu(1, :) = gamma0 + gamma1.*theta(1, :) + gamma2 * nu_RSS;
           ^^^^^^
} 
main
Running algorithm:


Algorithm converged. Run-time of: 3.71 seconds.
Running algorithm:


Algorithm converged. Run-time of: 4.16 seconds.
Running algorithm:


Algorithm converged. Run-time of: 4.35 seconds.
Running algorithm:


Algorithm converged. Run-time of: 3.86 seconds.
